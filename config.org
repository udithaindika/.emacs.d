w#+TITLE: My Emacs Config File
#+CREATOR: U<
#+STARTUP: overview
#+Credits: This Emacs Config is Based on the Uncle Dave's Tutorial
#+Keywords : el

* Constants
  
#+BEGIN_SRC emacs-lisp
  (defconst sys/win32p
    (eq system-type 'windows-nt)
    "Are we running on a WinTel system?")

  (defconst sys/linuxp
    (eq system-type 'gnu/linux)
    "Are we running on a GNU/Linux system?")

  (defconst sys/macp
    (eq system-type 'darwin)
    "Are we running on a Mac system?")
#+END_SRC

* Theme
The most important part of every configuration.
** A nice theme
My new favourite one I guess, really decent default values.
#+BEGIN_SRC emacs-lisp

;;(unless (package-installed-p 'spacebmacs-theme)
;;  (package-refresh-contents)
;;  (package-install 'spacemacs-theme))


  (use-package zerodark-theme
    :ensure t
    :init
      (load-theme 'zerodark t))
#+END_SRC

** Some customization
The theme is great, really, but some of the concepts just suck with powerline.
#+BEGIN_SRC emacs-lisp
  (let ((class '((class color) (min-colors 89)))
        (default (if (true-color-p) "#abb2bf" "#afafaf"))
        (light (if (true-color-p) "#ccd4e3" "#d7d7d7"))
        (background (if (true-color-p) "#282c34" "#333333"))
        (background-dark (if (true-color-p) "#24282f" "#222222"))
        (background-darker (if (true-color-p) "#22252c" "#222222"))
        (mode-line-inactive (if "#1c2129" "#222222"))
        (mode-line-active (if (true-color-p) "#6f337e" "#875f87"))
        (background-lighter (if (true-color-p) "#3a3f4b" "#5f5f5f"))
        (background-red (if (true-color-p) "#4c3840" "#5f5f5f"))
        (bright-background-red (if (true-color-p) "#744a5b" "#744a5b"))
        (background-purple (if (true-color-p) "#48384c" "#5f5f5f"))
        (background-blue (if (true-color-p) "#38394c" "#444444"))
        (bright-background-blue (if (true-color-p) "#4e5079" "#4e5079"))
        (background-green (if (true-color-p) "#3d4a41" "#5f5f5f"))
        (bright-background-green (if (true-color-p) "#3f6d54" "#3f6d54"))
        (background-orange (if (true-color-p) "#4a473d" "#5f5f5f"))
        (hl-line (if (true-color-p) "#2c323b" "#333333"))
        (grey (if (true-color-p) "#cccccc" "#cccccc"))
        (grey-dark (if (true-color-p) "#666666" "#666666"))
        (highlight (if (true-color-p) "#3e4451" "#5f5f5f"))
        (comment (if (true-color-p) "#687080" "#707070"))
        (orange (if (true-color-p) "#da8548" "#d7875f"))
        (orange-light (if (true-color-p) "#ddbd78" "#d7af87"))
        (red (if (true-color-p) "#ff6c6b" "#ff5f5f"))
        (purple (if (true-color-p) "#c678dd" "#d787d7"))
        (purple-dark (if (true-color-p) "#64446d" "#5f5f5f"))
        (blue (if (true-color-p) "#61afef" "#5fafff"))
        (blue-dark (if (true-color-p) "#1f5582" "#005f87"))
        (green (if (true-color-p) "#98be65" "#87af5f"))
        (green-light (if (true-color-p) "#9eac8c" "#afaf87"))
        (peach "PeachPuff3")
        (diff-added-background (if (true-color-p) "#284437" "#284437"))
        (diff-added-refined-background (if (true-color-p) "#1e8967" "#1e8967"))
        (diff-removed-background (if (true-color-p) "#583333" "#580000"))
        (diff-removed-refined-background (if (true-color-p) "#b33c49" "#b33c49"))
        (diff-current-background (if (true-color-p) "#29457b" "#29457b"))
        (diff-current-refined-background (if (true-color-p) "#4174ae" "#4174ae")))

    (custom-theme-set-faces
     'zerodark

     `(fancy-battery-charging ((,class (:background ,background-blue :height 1.0 :bold t))))
     `(fancy-battery-discharging ((,class (:background ,background-blue :height 1.0))))
     `(fancy-battery-critical ((,class (:background ,background-blue :height 1.0))))
     
     ;; mode line stuff
     `(mode-line ((,class (:background ,background-blue :height 1.0 :foreground ,blue
                                       :distant-foreground ,background-blue
                                       :box ,(when zerodark-use-paddings-in-mode-line
                                               (list :line-width 6 :color background-blue))))))
     
     `(mode-line-inactive ((,class (:background ,background-blue :height 1.0 :foreground ,default
                                                :distant-foreground ,background-blue
                                                :box ,(when zerodark-use-paddings-in-mode-line
                                                        (list :line-width 6 :color background-blue))))))

     `(header-line ((,class (:inherit mode-line-inactive))))

     `(powerline-active0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-active1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-active2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                           :distant-foreground ,background-blue))))
     `(powerline-inactive0 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             :distant-foreground ,background-blue))))
     `(powerline-inactive1 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             distant-foreground ,background-blue))))
     `(powerline-inactive2 ((,class (:height 1.0 :foreground ,blue :background ,background-blue
                                             :distant-foreground ,background-blue))))

     `(dashboard-heading-face ((,class (:background ,background :foreground ,blue
                                                    :bold t :height 1.2))))
     `(dashboard-banner-logo-title-face ((,class (:background ,background :foreground ,blue
                                                              :bold t :height 1.2))))
     `(widget-button ((,class (:background ,background :foreground ,default :bold nil
                                           :underline t :height 0.9))))
     
     ;; erc stuff
     `(erc-nick-default-face ((,class :foreground ,blue :background ,background :weight bold)))

     ;; org stuff
     `(outline-1 ((,class (:foreground ,blue :weight bold :height 1.8 :bold nil))))
     `(outline-2 ((,class (:foreground ,purple :weight bold :height 1.7 :bold nil))))
     `(outline-3 ((,class (:foreground ,peach :weight bold :height 1.6 :bold nil))))
     `(outline-4 ((,class (:foreground ,green-light :weight bold :height 1.5 :bold nil))))
     `(outline-5 ((,class (:foreground ,blue :weight bold :height 1.4 :bold nil))))
     `(outline-6 ((,class (:foreground ,purple :weight bold :height 1.3 :bold nil))))
     `(outline-7 ((,class (:foreground ,peach :weight bold :height 1.2 :bold nil))))
     `(outline-8 ((,class (:foreground ,green-light :weight bold :height 1.1 :bold nil))))
     
     `(org-block-begin-line ((,class (:background ,background-blue :foreground ,blue
                                                  :bold t :height 1.0))))
     `(org-block-end-line ((,class (:background ,background-blue :foreground ,blue
                                                :bold t :height 1.0))))))
#+END_SRC
* Use Package Related
#+BEGIN_SRC emacs-lisp
  (use-package use-package-ensure-system-package
    :ensure t)
#+END_SRC
* Default Settings
** show lines and columns on the modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
  (global-display-line-numbers-mode)
  (when window-system (global-hl-line-mode t))

  ;; Following lines enable the relative number - But that might not be very usefull in emacs, instead use the Avy go to line 
  ;;(display-line-numbers-mode)  
  ;;(setq display-line-numbers 'relative)
#+END_SRC

** Subword
#+BEGIN_SRC emacs-lisp
(global-subword-mode 1)
#+END_SRC
** Electric Mode
#+BEGIN_SRC emacs-lisp

  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))
  (electric-pair-mode 1)




#+END_SRC
** Set Time
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(display-time-mode 1)

#+END_SRC
** Settings
#+BEGIN_SRC emacs-lisp
  ;; This is gonna speed up the keyboard scrolling - https://lists.gnu.org/archive/html/emacs-devel/2006-09/msg00814.html
  (setq auto-window-vscroll nil)  

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)

  (setq default-directory "~/")

  ;;Fuck that bell
  (setq ring-bell-function 'ignore)

  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (set-terminal-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)

  (setq visible-bell t)
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (setq create-lockfiles nil)  ; stop creating .# files



  (when window-system (global-prettify-symbols-mode t))


  (fset 'yes-or-no-p 'y-or-n-p)

  (setq visible-cursor nil)
  (blink-cursor-mode  `blink-cursor-blinks)

  (global-auto-revert-mode nil)


#+END_SRC
** Indented Correctly
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
      :ensure t)

#+END_SRC
* Terminal
  
#+BEGIN_SRC emacs-lisp

  (defvar my-term-shell "/bin/bash")
  (when sys/linuxp (setq my-term-shell "/bin/bash"))
  (when sys/win32p (setq my-term-shell "C:\\Program Files\\Git\\bin\\bash.exe"))
  (when sys/macp (setq my-term-shell "/bin/bash"))

  (defun run-bash ()
    (interactive)
    (let ((shell-file-name my-term-shell))
      (shell "*bash*")))

  (defun run-cmdexe ()
    (interactive)
    (let ((shell-file-name "cmd.exe"))
      (shell "*cmd.exe*")))

  (defun my-windows-shell-setup () (interactive)
	 ;; The variable `git-shell-path' contains the path to the `Git\bin'
	 ;; file on my system. I install this in      
	 (setq explicit-shell-file-name my-term-shell)
	 (setq explicit-bash.exe-args '("--login" "-i"))
	 (message "Windows preferences set."))

  (if sys/win32p (my-windows-shell-setup))


(defun powershell (&optional buffer)
  "Launches a powershell in buffer *powershell* and switches to it."
  (interactive)
  (let ((buffer (or buffer "*powershell*"))
    (powershell-prog "c:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe"))
    (make-comint-in-buffer "shell" "*powershell*" powershell-prog)
    (switch-to-buffer buffer)))


#+END_SRC

* Org mode
** Basic Settings
#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'current-window)
(add-to-list 'org-structure-template-alist 
'("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Formattings
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  ;; Enable line wrap in Org mode
  (add-hook 'org-mode-hook '(lambda () (visual-line-mode 1)))
  (setq org-agenda-files (append
			  (file-expand-wildcards  "~/org-notes/*.org")))

  ;; Key Binding
  (global-set-key (kbd "C-c I") #'my-find-user-init-file)

  (add-hook 'org-mode-hook 'org-indent-mode)

#+END_SRC

* IDO & Smex mode
** Standard IDO Mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO Vertical 
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
		:ensure t
		:init
		(ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** Smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex ))

#+END_SRC
** Switch Buffer
#+BEGIN_SRC emacs-lisp
  ;; (global-set-key (kbd "C-x b") 'ido-switch-buffer) - This is the default

#+END_SRC

* Which Key
#+BEGIN_SRC emacs-lisp

  (use-package which-key
    :ensure t
    :init (which-key-mode))


#+END_SRC

* Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode t))
#+END_SRC
* Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1))

#+END_SRC
* Util Functions
** Kill Word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))

  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
** Open my init file in another window
#+BEGIN_SRC emacs-lisp

(defun my-open-init-file ()
  "Edit the `user-init-file', in another window."
  (interactive)
  (find-file-other-window user-init-file))

#+END_SRC
** Copy whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line()
    (interactive)
    (save-excursion (kill-new
                     (buffer-substring (point-at-bol)
                                       (point-at-eol)))))

  (global-set-key (kbd "C-c w l") 'copy-whole-line)

  ;; If nothing is marked yanks whole line
  (use-package whole-line-or-region
    :ensure t
    :config (whole-line-or-region-global-mode 1))
#+END_SRC
** Jump to Next Workd
#+BEGIN_SRC emacs-lisp

  (defun get-point (symbol &optional arg)
    "get the point"
    (funcall symbol arg)
    (point))

  (defun get-word-from-to (begin-of-thing end-of-thing &optional arg)
    "Return thing between beg & end "
    (save-excursion
      (let ((beg (get-point begin-of-thing 1))
            (end (get-point end-of-thing arg)))
        (buffer-substring beg end))))

  (defun get-word-at-cursor (&optional arg)
    "Get word at point"
    (interactive "P")
    (get-word-from-to 'backward-word-strictly 'forward-word-strictly arg))

  (defun jump-to-next-occurence (&optional arg)
    "Jump to the next occurence of the word where the cursor is at"
    (interactive "P")
    (let ((word-at-cursor (get-word-at-cursor)))
      (search-forward word-at-cursor)))

  (defun jump-to-previous-occurence (&optional arg)
    "Jump to the next occurence of the word where the cursor is at"
    (interactive "P")
    (let ((word-at-cursor (get-word-at-cursor)))
      (search-backward word-at-cursor)))


  (global-set-key (kbd "C-c n") 'jump-to-next-occurence)
  (global-set-key (kbd "C-c N") 'jump-to-previous-occurence)
#+END_SRC

** Logout/kill current User on EXWM

#+BEGIN_SRC emacs-lisp
  (when (and sys/linuxp window-system)
  (defun exwm-logout()
    "Tidies the HTML content in the buffer using `tidy'"
    (interactive)
    (shell-command-on-region
     ;; beginning and end of buffer
     (point-min)
     (point-max)
     ;; command and parameters
     "killall -u $USER"
     ;; output buffer
     (current-buffer)
     ;; replace?
     t
     ;; name of the error buffer
     "*Tidy Error Buffer*"
     ;; show error buffer?
     t)))

#+END_SRC
* Cofig edit/reload
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Buffers
** map the Defaulk Buffer kill
#+BEGIN_SRC emacs-lisp

  (substitute-key-definition 'kill-buffer
			     'kill-buffer-and-window
			     global-map)



#+END_SRC
** Use the Ibuffer instead of the default buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)

#+END_SRC
** Kill all buufers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-c k k") 'kill-all-buffers)
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind 
    ("M-s" . avy-goto-char)
    ("C-c l" . avy-goto-line ))

#+END_SRC
* Smart parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC
* Rainbow Delimer
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
* Switch-Winow
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind ([remap other-window] . switch-window))
#+END_SRC
* Window Splitting function
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5)))
    (setq dashboard-banner-logo-title "Hello World!"))

  (setq dashboard-center-content t)
  (setq dashboard-set-footer nil)


#+END_SRC
* Auto Completion
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 2)
    (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
    (define-key company-active-map(kbd "M-n") nil)
    (define-key company-active-map(kbd "M-p") nil)
    (define-key company-active-map(kbd "C-n") #'company-select-next)
    (define-key company-active-map(kbd "C-p") #'company-select-previous))

  (use-package company-statistics
      :ensure t
      :init
      (company-statistics-mode))

  (use-package company-web
      :ensure t)

  (use-package company-try-hard
      :ensure t
      :bind
      (("C-<tab>" . company-try-hard)
       :map company-active-map
       ("C-<tab>" . company-try-hard)))

  (use-package company-quickhelp
      :ensure t
      :config
      (company-quickhelp-mode))
#+END_SRC
* Modeline
** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator 'arrow)
    (spaceline-spacemacs-theme))
#+END_SRC
** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode))
#+END_SRC
* Dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-c d" . dmenu))  
#+END_SRC
* Symon- A performance manager
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind ("C-c p" . 'symon-mode))
#+END_SRC
* Popup kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper 
    :ensure t
    :bind ("C-s" . swiper))
;; Some hack to make swiper startup faster https://www.reddit.com/r/emacs/comments/cfdv1y/swiper_is_extreamly_slow/
;; By default if you have visual line mode on swiper scans every visual line, which can be really slow in large files. This forces swiper to revert back to searching only every actual line even if the user is using visual line mode
(setq swiper-use-visual-line nil)
(setq swiper-use-visual-line-p (lambda (a) nil))

#+END_SRC
* Mark Multiple
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
* Expang Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . 'er/expand-region))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  ;;  (use-package projectile
  ;;    :ensure t
  ;;    :config
  ;;    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
  ;;    (projectile-mode +1 ))

  (use-package projectile
    :init (progn
            (setq projectile-enable-caching t)
            (setq projectile-indexing-method 'hybrid)
            (setq projectile-globally-ignored-directories '("node_modules" "node_modules/" "dist" "dist/" "coverage" ))
            (setq projectile-ignored-directories '("_output" "node_modules" "node_modules/" "pkg" "dist" "dist/" "dist/js" "coverage" ""))
            (setq projectile-ignored-files '(".DS_Store" ".gitmodules" "package-lock.json" "yarn.lock" ".svg" "#" "~" "yarn-error.log" ".log" "*log" "yarn*"))
            )
    :bind (
           ("C-x p" . projectile-command-map))
    :config (projectile-mode 1))


  ;; Hybrid is slower than alein but use both native and git indexing
;;  (setq projectile-indexing-method 'hybrid)
  ;; Alien is the Fastest, Where it checkes the Git for File Indexing
  ;;(setq projectile-indexing-method 'alien)
  (setq projectile-git-submodule-command nil);; This is to support the Git Indexing, Without this it will fail
#+END_SRC
* Magit
** Default Magit Install
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC
** Desable standard VC in emacs
#+BEGIN_SRC emacs-lisp
  (setq vc-handled-backends nil)
  (setq magit-refresh-status-buffer nil)

#+END_SRC
* All Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
* Curser Blink
#+BEGIN_SRC emacs-lisp
 
;; https://stackoverflow.com/questions/13625080/looking-forward-a-way-to-make-cursor-blinks-like-a-heartbeat-in-emacs
 (require 'cl)
  (require 'color)

  (defvar heartbeat-fps 16)
  (defvar heartbeat-period 5)

  (defun heartbeat-range (from to cnt)
    (let ((step (/ (- to from) (float cnt))))
      (loop for i below cnt collect (+ from (* step i)))))

  (defun heartbeat-cursor-colors ()
    (let ((cnt (* heartbeat-period heartbeat-fps)))
      (mapcar (lambda (r)
                (color-rgb-to-hex r 0 0))
              (nconc (heartbeat-range .2 1 (/ cnt 2))
                     (heartbeat-range 1 .2 (/ cnt 2))))))

  (defvar heartbeat-cursor-timer nil)
  (defvar heartbeat-cursor-old-color)

  (define-minor-mode heartbeat-cursor-mode
    "Change cursor color with the heartbeat effect."
    nil "" nil
    :global t
    (when heartbeat-cursor-timer
      (cancel-timer heartbeat-cursor-timer)
      (setq heartbeat-cursor-timer nil)
      (set-face-background 'cursor heartbeat-cursor-old-color))
    (when heartbeat-cursor-mode
      (setq heartbeat-cursor-old-color (face-background 'cursor)
            heartbeat-cursor-timer
            (run-with-timer
             0 (/ 1 (float heartbeat-fps))
             (lexical-let ((colors (heartbeat-cursor-colors)) tail)
               (lambda ()
                 (setq tail (or (cdr tail) colors))
                 (set-face-background 'cursor (car tail))))))))
#+END_SRC
* Async 
#+BEGIN_SRC emacs-lisp
(use-package async
  :ensure t
  :init (dired-async-mode 1))

#+END_SRC
* Rotate Windows
#+BEGIN_SRC emacs-lisp
  (defun rotate-windows (arg)
    "Rotate your windows; use the prefix argument to rotate the other direction"
    (interactive "P")
    (if (not (> (count-windows) 1))
        (message "You can't rotate a single window!")
      (let* ((rotate-times (prefix-numeric-value arg))
             (direction (if (or (< rotate-times 0) (equal arg '(4)))
                            'reverse 'identity)))
        (dotimes (_ (abs rotate-times))
          (dotimes (i (- (count-windows) 1))
            (let* ((w1 (elt (funcall direction (window-list)) i))
                   (w2 (elt (funcall direction (window-list)) (+ i 1)))
                   (b1 (window-buffer w1))
                   (b2 (window-buffer w2))
                   (s1 (window-start w1))
                   (s2 (window-start w2))
                   (p1 (window-point w1))
                   (p2 (window-point w2)))
              (set-window-buffer-start-and-point w1 b2 s2 p2)
              (set-window-buffer-start-and-point w2 b1 s1 p1)))))))

  (global-set-key (kbd "C-c 1")
                  (lambda()
                    (interactive)
                    (rotate-windows 1)))


  (global-set-key (kbd "C-c 2")
                  (lambda()
                    (interactive)
                    (rotate-windows -1)))

#+END_SRC
* Javascript experiment
** Dev Setup
 #+BEGIN_SRC emacs-lisp
   (use-package js2-mode
     :ensure t
     :mode ("\\.js" . js2-mode)
     :init
     (setq js2-global-externs '("it" "afterEach" "beforeEach" "before" "after" "describe" "require" "module"))
     :config
     (setq-default js2-basic-offset 2)
     (setq js-indent-level 2))


   (use-package json-mode
     :ensure t
     :mode ("\\.json" . json-mode))

   (use-package js2-refactor
     :ensure t
     :requires js2-mode)
 #+END_SRC
* EXWM
#+BEGIN_SRC emacs-lisp
  (when (and sys/linuxp window-system)
   (use-package exwm
    :ensure t
    :config

      ;; necessary to configure exwm manually
      (require 'exwm-config)

      ;; fringe size, most people prefer 1 
      (fringe-mode 3)
    
      ;; emacs as a daemon, use "emacsclient <filename>" to seamlessly edit files from the terminal directly in the exwm instance
      (server-start)

      ;; this fixes issues with ido mode, if you use helm, get rid of it
      (exwm-config-ido)

      ;; a number between 1 and 9, exwm creates workspaces dynamically so I like starting out with 1
      (setq exwm-workspace-number 1)

      ;; this is a way to declare truly global/always working keybindings
      ;; this is a nifty way to go back from char mode to line mode without using the mouse
      (exwm-input-set-key (kbd "s-r") #'exwm-reset)
      (exwm-input-set-key (kbd "s-k") #'exwm-workspace-delete)


      ;; the simplest launcher, I keep it in only if dmenu eventually stopped working or something
      (exwm-input-set-key (kbd "s-&")
                          (lambda (command)
                            (interactive (list (read-shell-command "$ ")))
                            (start-process-shell-command command nil command)))

      ;; an easy way to make keybindings work *only* in line mode
      (push ?\C-q exwm-input-prefix-keys)
      (define-key exwm-mode-map [?\C-q] #'exwm-input-send-next-key)

      ;; simulation keys are keys that exwm will send to the exwm buffer upon inputting a key combination
      (exwm-input-set-simulation-keys
       '(
         ;; movement
         ([?\C-b] . left)
         ([?\M-b] . C-left)
         ([?\C-f] . right)
         ([?\M-f] . C-right)
         ([?\C-p] . up)
         ([?\C-n] . down)
         ([?\C-a] . home)
         ([?\C-e] . end)
         ([?\M-v] . prior)
         ([?\C-v] . next)
         ([?\C-d] . delete)
         ([?\C-k] . (S-end delete))
         ;; cut/paste
         ([?\C-w] . ?\C-x)
         ([?\M-w] . ?\C-c)
         ([?\C-y] . ?\C-v)
         ;; search
         ([?\C-s] . ?\C-f)))

      ;; this little bit will make sure that XF86 keys work in exwm buffers as well
      (dolist (k '(XF86AudioLowerVolume
                 XF86AudioRaiseVolume
                 XF86PowerOff
                 XF86AudioMute
                 XF86AudioPlay
                 XF86AudioStop
                 XF86AudioPrev
                 XF86AudioNext
                 XF86ScreenSaver
                 XF68Back
                 XF86Forward
                 Scroll_Lock
                 print))
      (cl-pushnew k exwm-input-prefix-keys))
    
      ;; this just enables exwm, it started automatically once everything is ready
      (exwm-enable)))
#+END_SRC
* Tab out
#+BEGIN_SRC emacs-lisp

;; Based on https://www.reddit.com/r/emacs/comments/3n1j4x/anyway_to_tab_out_of_parentheses/
;; Try the Xah's solutions later, seems that is more suitable. but this is more simple
(defun eide-smart-tab-jump-out-or-indent (&optional arg)
    "Smart tab behavior. Jump out quote or brackets, or indent."
    (interactive "P")
    (if (-contains? (list "\"" "'" ")" "}" ";" "|" ">" "]" ) (make-string 1 (char-after)))
        (forward-char 1)
      (indent-for-tab-command arg)))

  (global-set-key [remap indent-for-tab-command]
                  'eide-smart-tab-jump-out-or-indent)
#+END_SRC
* Mac Specific
#+BEGIN_SRC emacs-lisp
  (when sys/macp 
    (setq mac-command-modifier 'meta)
    (setq ns-function-modifier 'control))
#+END_SRC
